<!--
    // ====================================================================================================
    // Extract encrypted access token from cookie to call downstream API
    // Values in {{value}} syntax are defined as Named Values in APIM instance.
    // ====================================================================================================
-->
<policies>
    <inbound>
        <base />
        <cors allow-credentials="true">
            <allowed-origins>
                <origin>{{return-uri}}</origin>
            </allowed-origins>
            <allowed-methods preflight-result-max-age="300">
                <method>*</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
        <!-- 
            // ====================================================================================================
            // 1. Extract cookies from the request header.
            // 2. Split all cookies and select the one we're interested in.
            // 3. Remove cookie name to leave only the contents.
            // 4. Decode the cookie content from base64url to base64.
            // 5. Decode the base64 cookie content to bytes.
            // 6. Extract the IV from the encrypted cookie content.
            // 7. Decrypt the encrypted cookie content into a variable.
            // ====================================================================================================
         -->
        <set-variable name="access_token" value="@{block-001}" />
        <!-- 
            // ====================================================================================================
            // Set the decrypted access token as an Authorization header.
            // ====================================================================================================
         -->
        <choose>
            <when condition="@(inline-001)">
                <set-header name="Authorization" exists-action="override">
                    <value>@(inline-002)</value>
                </set-header>
            </when>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <choose>
            <when condition="@(inline-003)">
                <return-response>
                    <set-status code="401" reason="Unauthorized" />
                </return-response>
            </when>
        </choose>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>