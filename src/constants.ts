import { getVersion } from "./getVersion"
export const separator = "// ================== <Generated Separator. Please don't edit this line> =================="

export const cliHelp = `
ðŸ‘‹ Welcome to apim-policy-transformer!

âœ… Version: ${getVersion()}

âœ… Usage: apim-policy-transformer <command> <directory path>

ðŸ‘‰ Examples:
    $ apim-policy-transformer -c|--combine path/to/policies
    $ apim-policy-transformer -e|--extract path/to/scripts

ðŸ”Ž Here's what each command does:
    ðŸ“¥ extract: Extracts inline policies and policy sets from XML files in a directory and generates .csx files for each policy.
    ðŸ“¦ combine: Combines the extracted .csx files from subdirectories of a given directory into a single .csx file.

ðŸ‘‰ For the combine command, please provide a directory path that contains subdirectories with generated .csx files from the extract command. The directory structure should look like this:

.
â”œâ”€â”€ scripts
|   â”œâ”€â”€ subfolder1
|   |   â”œâ”€â”€ block-001.csx
|   |   â”œâ”€â”€ inline-001.csx
|   |   â”œâ”€â”€ replaced.xml
|   |   â”œâ”€â”€ context.csx
|   |   â””â”€â”€ context.json
|   â”œâ”€â”€ subfolder2
|   |   â”œâ”€â”€ block-001.csx
|   |   â”œâ”€â”€ inline-001.csx
|   |   â”œâ”€â”€ replaced.xml
|   |   â”œâ”€â”€ context.csx
|   |   â””â”€â”€ context.json

ðŸ‘‰ For the extract command, please provide a directory path that contains all the policy files. The directory structure should look like this:

.
â”œâ”€â”€ policies
|   â”œâ”€â”€ policy1.xml
|   â”œâ”€â”€ policy2.xml
|   â””â”€â”€ policy3.xml
`